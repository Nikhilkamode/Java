Simple - Java was designed for professional developers to learn and use easily. If you are aware of basic programming principles, then Java is not a hard nut to crack.
Secure - Java achieves security by confining Java Programs to Java Execution Environment and not allowing Java programs to access other parts of the computer system.
Portable - Portable code must run on a variety of operating systems, CPUs, and browsers. When a Java program is compiled, a Bytecode is generated, this bytecode can be executed on any platform using JVM ( Java Virtual Machine ). We will discuss JVM details in the latter part of the tutorial.
Object-Oriented - Java provides a clean, usable, and pragmatic approach to objects. It was designed on the principle that “Everything under the sun is an Object.”
Robust - The robustness of the program is the reliable execution on a variety of systems. To better understand this, consider one of the main reasons for program failure i.e memory management. In C/C++, a programmer must manually allocate and free dynamic memory. There are cases where programmers forgot to free up the dynamic memory which may cause program failure. Java virtually solves this problem as unused objects are garbage collected automatically.
Architecture Neutral - The central issue for Java Designers was that of code longevity and portability. One of the main problems for programmers was that there was no guarantee that the program running perfectly fine today will run tomorrow because of the system upgrades, processor upgrades, or changes in core system resources. Java Designers made several hard decisions and designed the Java Virtual Machine to solve this problem. Their goal was “write once, run anywhere, any time, forever“.
Distributed - Java is designed for the distributed environment because it handles TCP/IP protocol. It is very much useful in building large-scale distributed computing-based applications. Java also supports Remote Method Invocation. This feature enables a program to invoke methods across a network.
Dynamic - Java programs have run time metainformation to verify and resolve accesses of the objects at runtime. This makes it possible to dynamically link code in a safe and secure environment. It also gives us the feature to update small fragments of bytecode, dynamically updated on a running system.
